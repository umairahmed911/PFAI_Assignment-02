# -*- coding: utf-8 -*-
"""assingment-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d3qu2iFfWXJZyo1Rk60sVWdzw7jL5zIU
"""

# Import Necessary Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Titanic dataset (from seaborn for simplicity)
titanic_df = sns.load_dataset('titanic')

# Display Data Summary
print("--- First 6 Rows of Data ---")
print(titanic_df.head())
print("--- Summary of Data ---")
print(titanic_df.describe())

# Preprocess the Data
titanic_simple = titanic_df[['survived', 'pclass', 'sex', 'age', 'fare']]

titanic_simple['age'].fillna(titanic_simple['age'].mean(), inplace=True)
titanic_simple['sex'] = titanic_simple['sex'].map({'male': 0, 'female': 1})

# Convert 'survived' and 'pclass' to categorical
X = titanic_simple[['pclass', 'sex', 'age', 'fare']]
y = titanic_simple['survived']

# Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Build the Decision Tree Model
print("--- Building the Decision Tree Model ---")
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train, y_train)
print("--- Model Trained Successfully ---")

# Validate the Model
predictions = tree_model.predict(X_test)
conf_matrix = confusion_matrix(y_test, predictions)
print("--- Confusion Matrix (Test Data) ---")
print(conf_matrix)

# Calculate Accuracy
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy on Test Data: {accuracy:.3f}")

# Visualize Results
print("--- Plotting the Decision Tree ---")
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Plot Age vs Fare (Colored by Survival)
plt.figure(figsize=(8, 6))
sns.scatterplot(data=titanic_simple, x='age', y='fare', hue='survived', palette={0: 'red', 1: 'blue'})
plt.title("Age vs Fare (Colored by Survival)")
plt.show()

import onnx
print("ONNX version:", onnx.__version__)

import onnxruntime
print("ONNX Runtime version:", onnxruntime.__version__)

# Import Necessary Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import onnx
import skl2onnx
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType

# Load the Titanic dataset (from seaborn for simplicity)
import seaborn as sns
titanic_df = sns.load_dataset('titanic')

# Data Preprocessing
titanic_simple = titanic_df[['survived', 'pclass', 'sex', 'age', 'fare']]

# Handling missing values and encoding
titanic_simple['age'] = titanic_simple['age'].fillna(titanic_simple['age'].mean())
titanic_simple['sex'] = titanic_simple['sex'].map({'male': 0, 'female': 1})

# Feature and label separation
X = titanic_simple[['pclass', 'sex', 'age', 'fare']]
y = titanic_simple['survived']

# Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Build the Decision Tree Model
print("--- Building the Decision Tree Model ---")
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train, y_train)
print("--- Model Trained Successfully ---")

# Validate the Model
predictions = tree_model.predict(X_test)
conf_matrix = confusion_matrix(y_test, predictions)
print("--- Confusion Matrix (Test Data) ---")
print(conf_matrix)

# Calculate Accuracy
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy on Test Data: {accuracy:.3f}")

# Convert the trained model to ONNX format
print("--- Converting Model to ONNX Format ---")
initial_type = [('float_input', FloatTensorType([None, X_train.shape[1]]))]
onnx_model = convert_sklearn(tree_model, initial_types=initial_type)

# Save the ONNX model
onnx_file = "decision_tree_titanic.onnx"
with open(onnx_file, "wb") as f:
    f.write(onnx_model.SerializeToString())
print(f"--- Model successfully converted and saved as {onnx_file} ---")

import onnxruntime as rt
import numpy as np

# Load the ONNX model
onnx_file = "decision_tree_titanic.onnx"
session = rt.InferenceSession(onnx_file)

# Prepare test data as a numpy array (using the test data from earlier)
test_input = X_test.values.astype(np.float32)

# Get the input name for the ONNX model
input_name = session.get_inputs()[0].name
output_name = session.get_outputs()[0].name

# Perform inference
print("--- Running Inference with ONNX Model ---")
pred_onx = session.run([output_name], {input_name: test_input})[0]

# Compare ONNX predictions with original predictions
accuracy_onnx = accuracy_score(y_test, pred_onx)
print(f"ONNX Model Accuracy on Test Data: {accuracy_onnx:.3f}")